/*
 * Copyright 2019 Lutz Fischer <lfischer@staffmail.ed.ac.uk>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.rappsilber.fdr.gui.components.settings;

import java.awt.Container;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

/**
 *
 * @author Lutz Fischer <lfischer@staffmail.ed.ac.uk>
 */
public class OtherFilter extends javax.swing.JPanel {

    private int minPepFrags = 0;
    private double minPepCoverage = 0;
    private double minDeltaScore = 0;
    private int minPepStubs;
    private int minPepDoublets;
    private double minScore = 0;

    /**
     * Creates new form OtherFilter
     */
    public OtherFilter() {
        initComponents();
        ckCombineScoreAndDelta.setVisible(false);
        txtMinPepFrags.setHorizontalAlignment(SwingConstants.RIGHT);
        txtDeltaScore.setHorizontalAlignment(SwingConstants.RIGHT);
        txtMinPepCoverage.setHorizontalAlignment(SwingConstants.RIGHT);
        txtMinPepStubs.setHorizontalAlignment(SwingConstants.RIGHT);
        txtMinPepDoublets.setHorizontalAlignment(SwingConstants.RIGHT);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtMinPepCoverage = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDeltaScore = new javax.swing.JTextField();
        ckCombineScoreAndDelta = new javax.swing.JCheckBox();
        txtMinPepFrags = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ckTwoStepBoost = new javax.swing.JCheckBox();
        txtMinPepStubs = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMinPepDoublets = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtMinScore = new javax.swing.JTextField();

        txtMinPepCoverage.setText("0");
        txtMinPepCoverage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                higherThen1Test(evt);
            }
        });

        jLabel1.setText("Min Peptide Coverage");

        jLabel2.setText("Minimum Delta/Score");

        txtDeltaScore.setText("0");
        txtDeltaScore.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                higherThen1Test(evt);
            }
        });

        ckCombineScoreAndDelta.setText("PSM Score=(Score+Delta)/2");

        txtMinPepFrags.setText("0");
        txtMinPepFrags.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMinPepFragshigherThen1Test(evt);
            }
        });

        jLabel3.setText("Min Peptide Fragments");

        ckTwoStepBoost.setText("Boost Separately");

        txtMinPepStubs.setText("0");
        txtMinPepStubs.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMinPepFragshigherThen1Test(evt);
            }
        });

        jLabel4.setText("Minimum Peptide-Stubs");

        jLabel5.setText("Minimum Peptide-Doublets");

        txtMinPepDoublets.setText("0");
        txtMinPepDoublets.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMinPepFragshigherThen1Test(evt);
            }
        });

        jLabel6.setText("min Score");

        txtMinScore.setText("0");
        txtMinScore.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMinScoretxtMinPepFragshigherThen1Test(evt);
            }
        });
        txtMinScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinScoreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ckCombineScoreAndDelta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(ckTwoStepBoost)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMinScore)
                            .addComponent(txtMinPepDoublets, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtMinPepFrags, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtMinPepCoverage, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(txtDeltaScore)
                            .addComponent(txtMinPepStubs))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMinPepFrags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMinPepCoverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDeltaScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtMinPepStubs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtMinPepDoublets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtMinScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ckCombineScoreAndDelta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ckTwoStepBoost)
                .addContainerGap(44, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void higherThen1Test(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_higherThen1Test
        JTextField txt  = (JTextField) (evt.getSource());
        String sValue = txt.getText();
        sValue = sValue.replaceAll("[^0-9+\\-\\.,Ee]", "");
        if (sValue.length()< txt.getText().length())
            txt.setText(sValue);
        Double v = Double.parseDouble(sValue);
        if (v>1) {
            v=v/100.0;
            txt.setText(v.toString());
        }
        if (txt == txtMinPepCoverage) { 
            if (!Double.toString(this.minPepCoverage).contentEquals(txtMinPepCoverage.getText()))
                this.minPepCoverage = Double.parseDouble(txtMinPepCoverage.getText());
            
        } else if (txt == txtDeltaScore) {
            if (!Double.toString(this.minDeltaScore).contentEquals(txtDeltaScore.getText()))
                this.minDeltaScore = Double.parseDouble(txtDeltaScore.getText());
        }
    }//GEN-LAST:event_higherThen1Test

    private void txtMinPepFragshigherThen1Test(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMinPepFragshigherThen1Test
        JTextField txt  = (JTextField) (evt.getSource());
        String sValue = txt.getText();
        sValue = sValue.replaceAll("[^0-9+\\-\\.Ee]", "");
        sValue = sValue.replaceAll("\\[.,].*", "");
        if (sValue.length()< txt.getText().length())
            txt.setText(sValue);
        
        if (txt == txtMinPepFrags) 
            this.minPepFrags = Integer.parseInt(txtMinPepFrags.getText());
        else if (txt == txtMinPepDoublets)
            this.minPepDoublets = Integer.parseInt(txtMinPepDoublets.getText());
        else if (txt == txtMinPepStubs)
            this.minPepStubs = Integer.parseInt(txtMinPepStubs.getText());
    }//GEN-LAST:event_txtMinPepFragshigherThen1Test

    private void txtMinScoretxtMinPepFragshigherThen1Test(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMinScoretxtMinPepFragshigherThen1Test
        try {
            this.minScore = Double.parseDouble(txtMinScore.getText());
        } catch (Exception e) {
            txtMinScore.setText(Double.toString(minScore));
        }
    }//GEN-LAST:event_txtMinScoretxtMinPepFragshigherThen1Test

    private void txtMinScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinScoreActionPerformed

    }//GEN-LAST:event_txtMinScoreActionPerformed

    public double getMinDeltaScore() {
        return minDeltaScore;
    }

    public double getMinPepCoverage() {
        return minPepCoverage;
    }

    public int getMinPepFrags() {
        return minPepFrags;
    }

    public void setMinPepFrags(int minPepFrags) {
        this.minPepFrags = minPepFrags;
        txtMinPepFrags.setText(Integer.toString(minPepFrags));
    }

    public void setMinDeltaScore(Double d) {
        minDeltaScore = d;
        txtDeltaScore.setText(d.toString());
    }

    public void setMinPepCoverage(Double d) {
        minPepCoverage = d;
        txtMinPepCoverage.setText(d.toString());
    }
    
    public void combineScoreAndDelta(boolean c) {
        ckCombineScoreAndDelta.setSelected(c);
    }
    
    public boolean combineScoreAndDelta() {
        return ckCombineScoreAndDelta.isSelected();
    }

    public void twoStepBoost(boolean stepped) {
        ckTwoStepBoost.setSelected(stepped);
    }

    public boolean twoStepBoost() {
        return ckTwoStepBoost.isSelected();
    }

    public double getMinPeptideStubFilter() {
        return minPepStubs;
    }
    
    public void setMinPeptideStubFilter(Double d) {
        minPepStubs = d.intValue();;
        txtMinPepStubs.setText(Integer.toString(d.intValue()));
    }
    
    public double getMinPeptideDoubletFilter() {
        return minPepDoublets;
    }
    
    public void setMinPeptideDoubletFilter(Double d) {
        minPepDoublets = d.intValue();
        txtMinPepDoublets.setText(Integer.toString(d.intValue()));
    }

    public double getMinScore(){
        return this.minScore;
    }

    public void setMinScore(Double minscore){
        this.minScore = minscore;
        txtMinScore.setText(Double.toString(minscore));
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ckCombineScoreAndDelta;
    private javax.swing.JCheckBox ckTwoStepBoost;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtDeltaScore;
    private javax.swing.JTextField txtMinPepCoverage;
    private javax.swing.JTextField txtMinPepDoublets;
    private javax.swing.JTextField txtMinPepFrags;
    private javax.swing.JTextField txtMinPepStubs;
    private javax.swing.JTextField txtMinScore;
    // End of variables declaration//GEN-END:variables
}
