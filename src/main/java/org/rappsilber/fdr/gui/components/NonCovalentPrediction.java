/*
 * Copyright 2017 Lutz Fischer <lfischer@staffmail.ed.ac.uk>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.rappsilber.fdr.gui.components;

import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import org.rappsilber.fdr.OfflineFDR;
import org.rappsilber.fdr.entities.PSM;
import org.rappsilber.fdr.result.FDRResult;

/**
 *
 * @author Lutz Fischer <lfischer@staffmail.ed.ac.uk>
 */
public class NonCovalentPrediction extends javax.swing.JPanel {
    javax.swing.Action a = new AbstractAction("test") {
        @Override
        public void actionPerformed(ActionEvent e) {
            
        }
    };
    
    /**
     * Creates new form NonCovalentPrediction
     */
    public NonCovalentPrediction() {
        initComponents();
    }
    
    public void filterNonCovalent(OfflineFDR fdr, FDRResult result) {
        if (ckLinears.isSelected()) {
            for (PSM psm : fdr.getAllPSMs()) {
                
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ckLinears = new javax.swing.JCheckBox();
        spMaxScansLinear = new javax.swing.JSpinner();
        lblMaxScansLinear1 = new javax.swing.JLabel();
        lblMaxScansLinear2 = new javax.swing.JLabel();

        ckLinears.setText("Check For co-eluting linears");
        ckLinears.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckLinearsActionPerformed(evt);
            }
        });

        spMaxScansLinear.setEnabled(false);

        lblMaxScansLinear1.setText("Max");
        lblMaxScansLinear1.setEnabled(false);

        lblMaxScansLinear2.setText("scans");
        lblMaxScansLinear2.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ckLinears)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMaxScansLinear1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spMaxScansLinear, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMaxScansLinear2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckLinears)
                    .addComponent(spMaxScansLinear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaxScansLinear1)
                    .addComponent(lblMaxScansLinear2))
                .addContainerGap(92, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ckLinearsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckLinearsActionPerformed
        lblMaxScansLinear1.setEnabled(ckLinears.isSelected());
        lblMaxScansLinear2.setEnabled(ckLinears.isSelected());
        spMaxScansLinear.setEnabled(ckLinears.isSelected());
    }//GEN-LAST:event_ckLinearsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ckLinears;
    private javax.swing.JLabel lblMaxScansLinear1;
    private javax.swing.JLabel lblMaxScansLinear2;
    private javax.swing.JSpinner spMaxScansLinear;
    // End of variables declaration//GEN-END:variables
}
