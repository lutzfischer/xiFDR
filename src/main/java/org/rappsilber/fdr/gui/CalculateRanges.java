/*
 * Copyright 2020 Lutz Fischer <lfischer@staffmail.ed.ac.uk>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.rappsilber.fdr.gui;

import java.awt.Component;
import java.awt.EventQueue;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SwingUtilities;
import org.rappsilber.fdr.CSVinFDR;
import org.rappsilber.fdr.FDRSettingsImpl;
import org.rappsilber.fdr.utils.CalculateWriteUpdate;
import org.rappsilber.fdr.utils.MaximisingStatus;
import org.rappsilber.fdr.utils.MaximizingUpdate;
import org.rappsilber.utils.XiFDRUtils;

/**
 *
 * @author Lutz Fischer <lfischer@staffmail.ed.ac.uk>
 */
public class CalculateRanges extends javax.swing.JFrame {

    FDRGUI fdrgui;
    /**
     * Creates new form CalculateRanges
     */
    public CalculateRanges(FDRGUI gui) {
        this.fdrgui = gui;
        initComponents();
        lblCurrent.setVisible(false);
        txtCurrentPSM.setVisible(false);
        txtCurrentPep.setVisible(false);
        txtCurrentRes.setVisible(false);
        txtCurrentPPI.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPSM = new javax.swing.JLabel();
        lblPepPair = new javax.swing.JLabel();
        lblResPair = new javax.swing.JLabel();
        lblProtPair = new javax.swing.JLabel();
        lblFrom = new javax.swing.JLabel();
        lblTo = new javax.swing.JLabel();
        lblStep = new javax.swing.JLabel();
        btnRun = new javax.swing.JButton();
        spPSMFrom = new javax.swing.JSpinner();
        spPSMTo = new javax.swing.JSpinner();
        spPSMSteps = new javax.swing.JSpinner();
        spPepFrom = new javax.swing.JSpinner();
        spPepTo = new javax.swing.JSpinner();
        spPepSteps = new javax.swing.JSpinner();
        spResFrom = new javax.swing.JSpinner();
        spResTo = new javax.swing.JSpinner();
        spResStep = new javax.swing.JSpinner();
        spProtFrom = new javax.swing.JSpinner();
        spProtTo = new javax.swing.JSpinner();
        spProtStep = new javax.swing.JSpinner();
        lblCurrent = new javax.swing.JLabel();
        txtCurrentPSM = new javax.swing.JTextField();
        txtCurrentPep = new javax.swing.JTextField();
        txtCurrentRes = new javax.swing.JTextField();
        txtCurrentPPI = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblPSM.setText("PSM");

        lblPepPair.setText("Peptide Pair");

        lblResPair.setText("Residue Pairs");

        lblProtPair.setText("Protein Pairs");

        lblFrom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFrom.setText("From");

        lblTo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTo.setText("To");

        lblStep.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStep.setText("Step Width");

        btnRun.setText("Run All");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        spPSMFrom.setModel(new javax.swing.SpinnerNumberModel(100.0d, 0.01d, 100.0d, 1.0d));

        spPSMTo.setModel(new javax.swing.SpinnerNumberModel(100.0d, 0.01d, 100.0d, 1.0d));

        spPSMSteps.setModel(new javax.swing.SpinnerNumberModel(100.0d, 0.01d, 100.0d, 1.0d));

        spPepFrom.setModel(new javax.swing.SpinnerNumberModel(100.0d, 0.01d, 100.0d, 1.0d));

        spPepTo.setModel(new javax.swing.SpinnerNumberModel(100.0d, 0.01d, 100.0d, 1.0d));

        spPepSteps.setModel(new javax.swing.SpinnerNumberModel(100.0d, 0.01d, 100.0d, 1.0d));

        spResFrom.setModel(new javax.swing.SpinnerNumberModel(100.0d, 0.01d, 100.0d, 1.0d));

        spResTo.setModel(new javax.swing.SpinnerNumberModel(100.0d, 0.01d, 100.0d, 1.0d));

        spResStep.setModel(new javax.swing.SpinnerNumberModel(100.0d, 0.01d, 100.0d, 1.0d));

        spProtFrom.setModel(new javax.swing.SpinnerNumberModel(5.0d, 0.01d, 100.0d, 1.0d));

        spProtTo.setModel(new javax.swing.SpinnerNumberModel(20.0d, 0.01d, 100.0d, 1.0d));

        spProtStep.setModel(new javax.swing.SpinnerNumberModel(5.0d, 0.01d, 100.0d, 1.0d));

        lblCurrent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCurrent.setText("Current");

        txtCurrentPSM.setEditable(false);
        txtCurrentPSM.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtCurrentPSM.setText("100");

        txtCurrentPep.setEditable(false);
        txtCurrentPep.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtCurrentPep.setText("100");

        txtCurrentRes.setEditable(false);
        txtCurrentRes.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtCurrentRes.setText("100");

        txtCurrentPPI.setEditable(false);
        txtCurrentPPI.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtCurrentPPI.setText("100");

        jLabel1.setText("Iterates of the given FDR-combinations and calculates each one.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPSM)
                            .addComponent(lblProtPair)
                            .addComponent(lblResPair)
                            .addComponent(lblPepPair))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spPepFrom)
                            .addComponent(lblFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spPSMFrom)
                            .addComponent(spResFrom)
                            .addComponent(spProtFrom))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spPepTo)
                            .addComponent(lblTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spPSMTo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(spResTo)
                            .addComponent(spProtTo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spPSMSteps)
                            .addComponent(spPepSteps)
                            .addComponent(spResStep, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(spProtStep, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCurrent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCurrentPSM)
                            .addComponent(txtCurrentPep, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCurrentRes, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCurrentPPI, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRun))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStep)
                            .addComponent(lblCurrent))
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFrom)
                            .addComponent(lblTo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPSM)
                            .addComponent(spPSMFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spPSMTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spPSMSteps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCurrentPSM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPepPair)
                        .addComponent(spPepFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spPepTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spPepSteps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCurrentPep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblResPair)
                    .addComponent(spResFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spResTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spResStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCurrentRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProtPair)
                    .addComponent(spProtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spProtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spProtStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCurrentPPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRun)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        final CalculateWriteUpdate mu = new CalculateWriteUpdate() {
            @Override
            public void setStatus(final MaximisingStatus state) {
                javax.swing.SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        fdrgui.getFdrSettingsComplete().setMinPeptideFragmentsFilter(state.showMinFrags);
                        fdrgui.getFdrSettingsComplete().setMinDeltaScoreFilter(state.showDelta);
                        fdrgui.getFdrSettingsComplete().setMinPeptideCoverageFilter(state.showPepCoverage);
                        fdrgui.getFdrSettingsComplete().setPeptidePairFDR(state.showPepFDR);
                        fdrgui.getFdrSettingsComplete().setPSMFDR(state.showPSMFDR);
                        fdrgui.getFdrSettingsComplete().setPeptidePairFDR(state.showPepFDR);
                        fdrgui.getFdrSettingsComplete().setProteinGroupFDR(state.showProtFDR);
                        fdrgui.getFdrSettingsComplete().setProteinGroupLinkFDR(state.showLinkFDR);

                        

                        fdrgui.txtSumPSM.setText(state.showPSMCount);
                        fdrgui.txtSumPepPairs.setText(state.showPepCount);
                        fdrgui.txtSumProtGroups.setText(state.showProtCount);
                        fdrgui.txtSumLinks.setText(state.showLinkCount);
                        fdrgui.txtSumProtGroupPairs.setText(state.showPPICount);

                        fdrgui.txtSumLinksBetween.setText(state.showLinkCountBetween);

                        fdrgui.txtSumProtGroupPairsBetween.setText(state.showPPICountBetween);
                    }
                });
            }

            @Override
            public void setStatusText(String text) {
                fdrgui.setStatus(text);
            }

            @Override
            public void reportError(String text, Exception ex) {
                Logger.getLogger(CSVinFDR.class.getName()).log(Level.SEVERE, text, ex);
            }

            @Override
            public void setCurrent(final double psm, final double peptidepair, final double protein, final double link, final double ppi) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtCurrentPSM.setText(Double.toString(psm*100));
                        txtCurrentPep.setText(Double.toString(peptidepair*100));
                        txtCurrentRes.setText(Double.toString(link*100));
                        txtCurrentPPI.setText(Double.toString(ppi*100));
                    }
                });
            }

            @Override
            public void setComplete() {
                
            }

            @Override
            public boolean stopped() {
                return !CalculateRanges.this.isVisible();
            }
            
            
        };

        
        btnRun.setEnabled(false);
        fdrgui.setEnableRead(false);
        fdrgui.setEnableWrite(false);
        fdrgui.setEnableCalc(false);
        for (Component c : this.getContentPane().getComponents()) {
            if (c instanceof JSpinner) {
                c.setEnabled(false);
            }
        }
        
        lblCurrent.setVisible(true);
        txtCurrentPSM.setVisible(true);
        txtCurrentPep.setVisible(true);
        txtCurrentRes.setVisible(true);
        txtCurrentPPI.setVisible(true);
        
        Runnable rangeCalc = new Runnable() {
            public void run() {
                try {
                    fdrgui.getFdr().setProteinGroupFDRSetting(1d,1d,1d);
                    fdrgui.getFdr().setPsmFDRSetting((Double) spPSMFrom.getValue()/100d, 
                            (Double) spPSMTo.getValue()/100d, (Double) spPSMSteps.getValue()/100d);
                    fdrgui.getFdr().setPeptidePairFDRSetting((Double) spPepFrom.getValue()/100d, 
                            (Double) spPepTo.getValue()/100d, (Double) spPepSteps.getValue()/100d);
                    fdrgui.getFdr().setLinkFDRSetting((Double) spResFrom.getValue()/100d, 
                            (Double) spResTo.getValue()/100d, (Double) spResStep.getValue()/100d);
                    fdrgui.getFdr().setPpiFDRSetting((Double) spProtFrom.getValue()/100d, 
                            (Double) spProtTo.getValue()/100d, (Double) spProtStep.getValue()/100d);
                    try {
                        fdrgui.setCSVOutFile();
                        FDRSettingsImpl settings = new FDRSettingsImpl();
                        settings.setAll(fdrgui.getFdrSettings());
                        fdrgui.getFdr().calculateWriteFDR(fdrgui.getCsvOut().folder,
                                fdrgui.getCsvOut().basename, fdrgui.getSeparator(fdrgui.getFdr()), settings, mu);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(CalculateRanges.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } finally {
                    EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            btnRun.setEnabled(true);
                            fdrgui.setEnableRead(true);
                            fdrgui.setEnableCalc(true);
                            lblCurrent.setVisible(false);
                            txtCurrentPSM.setVisible(false);
                            txtCurrentPep.setVisible(false);
                            txtCurrentRes.setVisible(false);
                            txtCurrentPPI.setVisible(false);
                            fdrgui.setStatus("");
                            for (Component c : CalculateRanges.this.getContentPane().getComponents()) {
                                if (c instanceof JSpinner) {
                                    c.setEnabled(true);
                                }
                            }
                        }
                    });
                }
            }
        };
        Thread t = new Thread(rangeCalc, "Calculate Write Ranges");
        t.start();
        
    }//GEN-LAST:event_btnRunActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        if (!btnRun.isEnabled()) {
            if (JOptionPane.showConfirmDialog(rootPane, "This stops the curretn calculation!", "Close?", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                this.setVisible(false);
                fdrgui.getFdr().stopMaximizing();
                this.dispose();
            }
        } else {
            this.setVisible(false);
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculateRanges.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculateRanges.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculateRanges.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculateRanges.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CalculateRanges().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRun;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblCurrent;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblPSM;
    private javax.swing.JLabel lblPepPair;
    private javax.swing.JLabel lblProtPair;
    private javax.swing.JLabel lblResPair;
    private javax.swing.JLabel lblStep;
    private javax.swing.JLabel lblTo;
    private javax.swing.JSpinner spPSMFrom;
    private javax.swing.JSpinner spPSMSteps;
    private javax.swing.JSpinner spPSMTo;
    private javax.swing.JSpinner spPepFrom;
    private javax.swing.JSpinner spPepSteps;
    private javax.swing.JSpinner spPepTo;
    private javax.swing.JSpinner spProtFrom;
    private javax.swing.JSpinner spProtStep;
    private javax.swing.JSpinner spProtTo;
    private javax.swing.JSpinner spResFrom;
    private javax.swing.JSpinner spResStep;
    private javax.swing.JSpinner spResTo;
    private javax.swing.JTextField txtCurrentPPI;
    private javax.swing.JTextField txtCurrentPSM;
    private javax.swing.JTextField txtCurrentPep;
    private javax.swing.JTextField txtCurrentRes;
    // End of variables declaration//GEN-END:variables
}
